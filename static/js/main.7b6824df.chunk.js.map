{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","name","email","className","alt","src","CardList","Robots","map","user","i","key","SearchBar","searchfield","onSearchUpdate","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","robots","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b6824df.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Card({name, email}) {\n    return (\n        <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${name}?100x100`}></img>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}","import React from 'react'\nimport Card from './Card'\n\nexport default function CardList({Robots}) {\n\n    return (\n        <div>\n            {\n                Robots.map(\n                    (user, i) => {\n                        return (\n                        <Card \n                            key={i} \n                            name={Robots[i].name} \n                            email={Robots[i].email}\n                        />\n                        );\n                    }\n                )\n            }\n        </div>\n    )\n}\n","import React from 'react'\n\nconst SearchBar = ({searchfield, onSearchUpdate}) => {\n    return (\n        <div className='pa2' >\n            <input\n                className='pa3 ba b--green bg-lightest-blue' \n                type='search'\n                placeholder='search robots'\n                onChange={onSearchUpdate}\n                />\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react'\n\nexport default function Scroll(props) {\n    return (\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport 'tachyons';\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/SearchBar';\nimport Scroll from '../components/Scroll'\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    searchfield : state.searchRobots.searchfield,\n    robots : state.requestRobots.robots,\n    isPending : state.requestRobots.isPending,\n    error : state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchUpdate: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n  \n  render() {\n    const { searchfield , onSearchUpdate , robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return isPending ?\n    <h1>Loading</h1> :\n    (\n        <div className='tc'>\n          <h1>Robowars</h1>\n          <SearchBar onSearchUpdate={onSearchUpdate}/>\n          <Scroll>\n            <CardList Robots={filteredRobots}/>\n          </Scroll>\n        </div>\n    );\n    \n  }\n  }\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n } from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n } from './constants'\n\nconst initialStateSearch = {\n    searchfield : ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD :\n            return Object.assign({}, state, {searchfield : action.payload });\n        default:\n            return state;\n    }\n}\n\n\nconst initialStateRobots = {\n    isPending : false,\n    robots : [],\n    error : ''\n}\n\nexport const requestRobots =  (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING :\n            return Object.assign({}, state, {isPending : true })\n        case REQUEST_ROBOTS_SUCCESS :\n            return Object.assign({}, state, {robots: action.payload, isPending : false })\n        case REQUEST_ROBOTS_FAILED :\n            return Object.assign({}, state, {error: action.payload, isPending : false })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore , applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'\nimport App from './containers/App';\nimport 'tachyons';\nimport './index.css'\nimport { searchRobots , requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware,logger))\n\nReactDOM.render( \n      <Provider store={store} > \n        <App /> \n      </Provider>, \n      document.getElementById('root'));\n\n\n"],"sourceRoot":""}